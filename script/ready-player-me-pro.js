/* global AFRAME, THREE, UDPMissionDevices */

THREE.Math = THREE.MathUtils;

AFRAME.registerSystem("ready-player-me", {
  init: function () {
    this.entities = [];

    this.assetsEl = this.el.sceneEl.querySelector("a-assets");
    if (!this.assetsEl) {
      this.assetsEl = document.createElement("a-assets");
      this.el.sceneEl.appendChild(this.assetsEl);
    }

    this.footstepAudio = document.createElement("audio");
    this.footstepAudio.id = "footstepSound";
    this.footstepAudio.setAttribute(
      "src",
      "https://cdn.glitch.me/6c283599-191e-4c4a-b236-e1e1f0d90e7a%2Ffootstep.mp3?v=1638758108070"
    );
    this.assetsEl.appendChild(this.footstepAudio);
  },

  addEntity: function (entity) {
    this.entities.push(entity);
  },
  removeEntity: function (entity) {
    this.entities.splice(this.entities.indexOf(entity), 1);
  },

  tick: function () {
    this.entities.forEach((entity) => entity.tick(...arguments));
  },
});

AFRAME.registerComponent("ready-player-me", {
  dependencies: ["gltf-model"],
  schema: {
    hidePressure: { type: "boolean", default: true },
    flip: { type: "boolean", default: false },
    manualArticulation: { type: "boolean", default: false },
    pressureAnchoringEnabled: { type: "boolean", default: false },
    gateway: { type: "array", default: [] },
    rate: { type: "number", default: 40 },
    leftHandTrackingControls: { type: "selector" },
    rightHandTrackingControls: { type: "selector" },
    leftHandControls: { type: "selector" },
    rightHandControls: { type: "selector" },
    camera: { type: "selector" },
    mirrorMode: { type: "boolean", default: false },
    layer: { type: "number", default: -1 },
    udp: { type: "string", default: "" },
    thirdPerson: { type: "boolean", default: false },
  },
  init: function () {
    window._rig = this;

    this.sides = ["left", "right"];

    this.HAND_BONE_PREFIX = {
      left: "b_l_",
      right: "b_r_",
    };

    this.RPM_HAND_PREFIX = {
      left: "LeftHand",
      right: "RightHand",
    };

    this.BONE_MAPPING = {
      wrist: "",
      thumb1: "Thumb1",
      thumb2: "Thumb2",
      thumb3: "Thumb3",
      thumb_null: "Thumb4",
      index1: "Index1",
      index2: "Index2",
      index3: "Index3",
      index_null: "Index4",
      middle1: "Middle1",
      middle2: "Middle2",
      middle3: "Middle3",
      middle_null: "Middle4",
      ring1: "Ring1",
      ring2: "Ring2",
      ring3: "Ring3",
      ring_null: "Ring4",
      pinky1: "Pinky1",
      pinky2: "Pinky2",
      pinky3: "Pinky3",
      pinky_null: "Pinky4",
    };

    this.cameraWorldPosition = new THREE.Vector3();
    this.cameraWorldQuaternion = new THREE.Quaternion();
    this.cameraWorldEuler = new THREE.Euler();
    this.cameraCalibration = {
      position: new THREE.Vector3(),
      rotation: new THREE.Euler(0, 0, 0, "YXZ"),
      quaternion: new THREE.Quaternion(),
      reflection: new THREE.Vector3(),
      _rotation: new THREE.Euler(0, 0, 0, "YXZ"),
    };
    this.lastCameraQuaternion = new THREE.Quaternion();
    this.overrideHeadUpdate = true;
    this._cameraPosition = new THREE.Vector3();
    this._cameraPositionOffset = new THREE.Vector3();
    this._cameraPositionEulerOffset = new THREE.Euler();

    this.handTrackingControlsEulers = {};
    this.handTrackingControlsQuaternions = {};
    this.handTrackingControlsQuaternionInverses = {};
    this.handTrackingControlsCorrectionQuaternions = {};
    const handTrackingControlsCorrectionEuler = new THREE.Euler();
    Object.values(this.RPM_HAND_PREFIX).forEach((prefix) => {
      const isLeft = prefix.includes("Left");
      Object.values(this.BONE_MAPPING).forEach((suffix) => {
        this.handTrackingControlsEulers[prefix + suffix] = new THREE.Euler();
        this.handTrackingControlsQuaternions[prefix + suffix] =
          new THREE.Quaternion();
        this.handTrackingControlsQuaternionInverses[prefix + suffix] =
          new THREE.Quaternion();

        const q = (this.handTrackingControlsCorrectionQuaternions[
          prefix + suffix
        ] = new THREE.Quaternion());
        const e = handTrackingControlsCorrectionEuler;
        switch (suffix) {
          case "":
            if (this.data.mirrorMode) {
              e.set(Math.PI / 2, 0, 0);
            } else {
              e.set(-Math.PI / 2, Math.PI, 0);
            }
            break;
          case "Thumb1":
          case "Thumb2":
          case "Thumb3":
          case "Thumb4":
            const sign = isLeft ? 1 : -1;
            if (this.data.mirrorMode) {
              e.set(Math.PI / 2, (sign * -Math.PI) / 2, 0);
            } else {
              e.set(-Math.PI / 2, (sign * Math.PI) / 2, 0);
            }
            break;
          case "Index1":
          case "Index2":
          case "Index3":
          case "Index4":
          case "Middle1":
          case "Middle2":
          case "Middle3":
          case "Middle4":
          case "Ring1":
          case "Ring2":
          case "Ring3":
          case "Ring4":
          case "Pinky1":
          case "Pinky2":
          case "Pinky3":
          case "Pinky4":
            if (this.data.mirrorMode) {
              e.set(Math.PI / 2, 0, 0);
            } else {
              e.set(-Math.PI / 2, Math.PI, 0);
            }
            break;
          default:
            break;
        }
        q.setFromEuler(e);
      });
    });

    this.isHandControlsConnected = {};
    this.handControlsGesture = {};
    this.timelines = {};
    this.handControlsPoses = {
      Open: {
        right: {
          RightHandThumb1: {
            x: 0.15419512874858193,
            y: 0.1564272844290373,
            z: -0.3425186674295495,
            w: 0.9134743158492356,
          },
          RightHandThumb2: {
            x: -0.0644339994851564,
            y: 0.0831558145792787,
            z: 0.06742603062510702,
            w: 0.9921628472179899,
          },
          RightHandThumb3: {
            x: 0.06528592302074299,
            y: -0.08356785979265224,
            z: -0.06170989666793869,
            w: 0.9924445040517373,
          },
          RightHandThumb4: {
            x: 4.9770623622436005e-8,
            y: 1.093049661893275e-8,
            z: -2.7225647070139303e-8,
            w: 1.0000000159134268,
          },
          RightHandIndex1: {
            x: 0.01702955212397489,
            y: -0.028059194256566534,
            z: -0.03844343257853115,
            w: 0.9987215701892527,
          },
          RightHandIndex2: {
            x: 0.10133506822313987,
            y: 0.02622787481695569,
            z: 0.004545197528471757,
            w: 0.994496176200315,
          },
          RightHandIndex3: {
            x: -0.029019076265911825,
            y: 0.016302606868506552,
            z: 0.02649779899868414,
            w: 0.9990945873974297,
          },
          RightHandIndex4: {
            x: 0.5507050012081303,
            y: -0.2138294902748658,
            z: 0.12069060946294333,
            w: 0.7977685953802808,
          },
          RightHandMiddle1: {
            x: -0.03331697789112581,
            y: 0.008638864975023705,
            z: 0.006584386828848108,
            w: 0.9993858069553573,
          },
          RightHandMiddle2: {
            x: 0.09972387237672259,
            y: 0.011827035579859991,
            z: 0.0032138493897495264,
            w: 0.994939663829612,
          },
          RightHandMiddle3: {
            x: -0.07692448086413345,
            y: 0.03595609849210854,
            z: 0.003910275069683639,
            w: 0.9963806986193334,
          },
          RightHandMiddle4: {
            x: 0.6191334187737287,
            y: -0.2712335425413734,
            z: 0.11453916209859294,
            w: 0.7280020232080769,
          },
          RightHandRing1: {
            x: -0.06411354326227342,
            y: 0.049529256794722115,
            z: 0.04612642897051725,
            w: 0.9956448438774361,
          },
          RightHandRing2: {
            x: 0.14384072749291754,
            y: 0.03677573714086015,
            z: -0.0018711218299755916,
            w: 0.9889155035578612,
          },
          RightHandRing3: {
            x: 0.017400124731964894,
            y: 0.005468590769051299,
            z: -0.029381316982743388,
            w: 0.9994018571992507,
          },
          RightHandRing4: {
            x: 0.5359923827775245,
            y: -0.2851796687759187,
            z: 0.1731879636325499,
            w: 0.7754938185347544,
          },
          RightHandPinky1: {
            x: -0.09680125056192318,
            y: 0.09505825500213091,
            z: 0.13436126020387068,
            w: 0.9816009851765647,
          },
          RightHandPinky2: {
            x: 0.1939209756625227,
            y: 0.055061016517840865,
            z: 0.034063141355803364,
            w: 0.9788782378449677,
          },
          RightHandPinky3: {
            x: 0.027120256562539025,
            y: -0.0008210546564020975,
            z: -0.04912957578481597,
            w: 0.9984238044919385,
          },
          RightHandPinky4: {
            x: 0.4861529046751068,
            y: -0.3944522808522953,
            z: 0.16378958647023656,
            w: 0.7623881766358722,
          },
        },
        left: {
          LeftHandThumb1: {
            x: 0.1894674278038179,
            y: -0.1484385840579412,
            z: 0.36075580210392005,
            w: 0.9010678879075513,
          },
          LeftHandThumb2: {
            x: -0.06421180619258021,
            y: -0.08314703731156031,
            z: -0.06994563568499196,
            w: 0.9920035230499582,
          },
          LeftHandThumb3: {
            x: 0.061110255710222966,
            y: 0.08252417766684061,
            z: 0.009612478999132867,
            w: 0.9946672178811988,
          },
          LeftHandThumb4: {
            x: 7.443193700273909e-9,
            y: 8.924802868959247e-9,
            z: -2.239438898210544e-8,
            w: 0.9999999927772976,
          },
          LeftHandIndex1: {
            x: -0.0075157263716678635,
            y: 0.028150840818945436,
            z: 0.011849995167021857,
            w: 0.9995051918016102,
          },
          LeftHandIndex2: {
            x: 0.09173464187707286,
            y: -0.0262021585045435,
            z: -0.004799937884753594,
            w: 0.9954271280173057,
          },
          LeftHandIndex3: {
            x: -0.03764146868000495,
            y: -0.0162555708112346,
            z: -0.02663215498947165,
            w: 0.9988040932495452,
          },
          LeftHandIndex4: {
            x: 0.591360404102776,
            y: 0.11768531051817682,
            z: -0.028529168103640534,
            w: 0.7972635322034266,
          },
          LeftHandMiddle1: {
            x: -0.026740372351591046,
            y: -0.008291843269698571,
            z: -0.011562907722995269,
            w: 0.9995411466228985,
          },
          LeftHandMiddle2: {
            x: 0.10519212374828263,
            y: -0.011855919601695797,
            z: -0.003149938112485447,
            w: 0.9943762557969168,
          },
          LeftHandMiddle3: {
            x: -0.07139944282653943,
            y: -0.03651565758143048,
            z: -0.003669264310439336,
            w: 0.9967724306080594,
          },
          LeftHandMiddle4: {
            x: 0.6205691667969813,
            y: 0.1527368040714076,
            z: -0.054515155461505684,
            w: 0.767198468166694,
          },
          LeftHandRing1: {
            x: -0.08175908258916459,
            y: -0.0498922603514048,
            z: -0.039002093975697406,
            w: 0.9946381544271548,
          },
          LeftHandRing2: {
            x: 0.08984438826191998,
            y: -0.035624389070207166,
            z: 0.00004276495462824867,
            w: 0.995318487001666,
          },
          LeftHandRing3: {
            x: -0.013719601284787164,
            y: -0.004008980946201715,
            z: 0.029238459012304263,
            w: 0.9994702741182144,
          },
          LeftHandRing4: {
            x: 0.6321044731894176,
            y: 0.16929466701785395,
            z: -0.08927100390746578,
            w: 0.750875455679436,
          },
          LeftHandPinky1: {
            x: -0.1250119733258676,
            y: -0.0975146311275102,
            z: -0.10231781990168662,
            w: 0.9820356275499091,
          },
          LeftHandPinky2: {
            x: 0.17895692654186734,
            y: -0.0538588474204975,
            z: -0.0347672715309875,
            w: 0.9817662037511761,
          },
          LeftHandPinky3: {
            x: 0.026337099714311363,
            y: 0.0008183885029845878,
            z: 0.04913122416620522,
            w: 0.9984447209272519,
          },
          LeftHandPinky4: {
            x: 0.554348436663983,
            y: 0.26335975850713533,
            z: -0.10715937376305328,
            w: 0.7822124796402797,
          },
        },
      },
      Point: {
        left: {
          LeftHandThumb1: {
            x: 0.35454567619742333,
            y: 0.10430273459158693,
            z: 0.12617334493606425,
            w: 0.9205970501066687,
          },
          LeftHandThumb2: {
            x: -0.04882137902415998,
            y: -0.0814123717362574,
            z: -0.23337250118250857,
            w: 0.9677428797486217,
          },
          LeftHandThumb3: {
            x: 0.02792200864699579,
            y: 0.06914653984420466,
            z: -0.3475555911998695,
            w: 0.93468943780403,
          },
          LeftHandThumb4: {
            x: 3.86241423899758e-7,
            y: 2.023739290035742e-7,
            z: 1.530462783727593e-7,
            w: 1.0000001440959987,
          },
          LeftHandIndex1: {
            x: 0.185076402801516,
            y: 0.025261143352902925,
            z: -0.07382397718460726,
            w: 0.9796218447677802,
          },
          LeftHandIndex2: {
            x: 0.04214912511812596,
            y: -0.02603101630097221,
            z: -0.0061053801781593055,
            w: 0.9987537327428511,
          },
          LeftHandIndex3: {
            x: -0.06873892760821237,
            y: -0.01607595294893157,
            z: -0.027100500742943266,
            w: 0.997137238498604,
          },
          LeftHandIndex4: {
            x: 0.038278847839096075,
            y: 0.6275008288099491,
            z: -0.051201367412384236,
            w: 0.775987404492961,
          },
          LeftHandMiddle1: {
            x: 0.5906992969577889,
            y: -0.055290199134624865,
            z: -0.07127130655762992,
            w: 0.8018341935249601,
          },
          LeftHandMiddle2: {
            x: 0.7952011273084868,
            y: -0.011934862956951432,
            z: 0.006298740020193809,
            w: 0.6061954921439472,
          },
          LeftHandMiddle3: {
            x: -0.5287188599790462,
            y: 0.0887595004475597,
            z: -0.022620568592027948,
            w: -0.8438404572088511,
          },
          LeftHandMiddle4: {
            x: 0.7827181100857152,
            y: 0.26379629910489166,
            z: 0.49760743793549617,
            w: 0.2648596533118335,
          },
          LeftHandRing1: {
            x: 0.6313474553329911,
            y: -0.11818395723553841,
            z: -0.07638822841125964,
            w: 0.7626258060464002,
          },
          LeftHandRing2: {
            x: 0.7336980298002249,
            y: -0.04127309437779783,
            z: 0.02256424653963133,
            w: 0.677845526004789,
          },
          LeftHandRing3: {
            x: -0.5021158599341424,
            y: 0.027577633493329007,
            z: -0.027665419731649595,
            w: -0.8639178087174473,
          },
          LeftHandRing4: {
            x: 0.7126969961215146,
            y: 0.20655775157034048,
            z: 0.621289392873017,
            w: 0.251786526922823,
          },
          LeftHandPinky1: {
            x: 0.6295160787151486,
            y: -0.20372210815750108,
            z: -0.03331578034012929,
            w: 0.7490642206502202,
          },
          LeftHandPinky2: {
            x: 0.7273908063621324,
            y: -0.0903114748677257,
            z: -0.0006476691083429492,
            w: 0.68025439483224,
          },
          LeftHandPinky3: {
            x: 0.5123252042847761,
            y: 0.002391868010403038,
            z: 0.04185173070883026,
            w: 0.8577676681438686,
          },
          LeftHandPinky4: {
            x: 0.6388010420664355,
            y: 0.21343744890462263,
            z: 0.6785633144741855,
            w: 0.29313756795585016,
          },
        },
        right: {
          RightHandThumb1: {
            x: 0.35906760695857154,
            y: -0.12137990822488617,
            z: -0.10562721941886982,
            w: 0.919336811647733,
          },
          RightHandThumb2: {
            x: -0.04784054538594573,
            y: 0.08123408826280243,
            z: 0.24311762911941634,
            w: 0.965404800178713,
          },
          RightHandThumb3: {
            x: 0.020515420959021535,
            y: -0.06519678633527547,
            z: 0.4164701707256368,
            w: 0.9065764627841366,
          },
          RightHandThumb4: {
            x: -3.693239508661961e-8,
            y: 5.6716278062918235e-8,
            z: 1.0715136627981181e-7,
            w: 1.0000000334120482,
          },
          RightHandIndex1: {
            x: 0.11171972259543478,
            y: -0.026920364458619866,
            z: 0.09541240864963009,
            w: 0.9887822718155446,
          },
          RightHandIndex2: {
            x: 0.10530271054412654,
            y: 0.026237835992042734,
            z: 0.004439660210227753,
            w: 0.9940840254768328,
          },
          RightHandIndex3: {
            x: -0.040108884551892876,
            y: 0.016241905528975573,
            z: 0.026670017136173285,
            w: 0.9987072462501598,
          },
          RightHandIndex4: {
            x: 0.014620855162250868,
            y: -0.6497524546428296,
            z: 0.025253343746021395,
            w: 0.7595854515799333,
          },
          RightHandMiddle1: {
            x: 0.5353540910264861,
            y: 0.0524914559412834,
            z: 0.07819397274352012,
            w: 0.8393606245955154,
          },
          RightHandMiddle2: {
            x: 0.8070494333604773,
            y: 0.011832843780296757,
            z: -0.006500841672689019,
            w: 0.5903294428034587,
          },
          RightHandMiddle3: {
            x: -0.5299058406129252,
            y: -0.08884255886942334,
            z: 0.022672812594860564,
            w: -0.8430850267235053,
          },
          RightHandMiddle4: {
            x: 0.7808197631404881,
            y: -0.21614276218135842,
            z: -0.538127867545921,
            w: 0.2324243458825498,
          },
          RightHandRing1: {
            x: 0.5791465122160254,
            y: 0.11589166651438983,
            z: 0.08848815069145577,
            w: 0.8020774260806469,
          },
          RightHandRing2: {
            x: 0.7655505473008474,
            y: 0.04086563415241732,
            z: -0.0237395012613003,
            w: 0.6416375702591446,
          },
          RightHandRing3: {
            x: -0.5179546744449252,
            y: -0.02827658621991165,
            z: 0.02746308031229663,
            w: -0.8544990606721982,
          },
          RightHandRing4: {
            x: 0.6952528112088581,
            y: -0.1884664547816416,
            z: -0.6477215667245788,
            w: 0.24811408902485746,
          },
          RightHandPinky1: {
            x: 0.5618448111272143,
            y: 0.20632964936513748,
            z: 0.06449226719814047,
            w: 0.798498054283382,
          },
          RightHandPinky2: {
            x: -0.7637893893713769,
            y: -0.09190073291602999,
            z: 0.002523998911955143,
            w: -0.6388844966605661,
          },
          RightHandPinky3: {
            x: -0.5396743881223822,
            y: 0.0024743303362520577,
            z: 0.04100039587842838,
            w: -0.8408712963093293,
          },
          RightHandPinky4: {
            x: 0.6076494496154305,
            y: -0.1894844735440373,
            z: -0.7124503147298644,
            w: 0.2954189649792251,
          },
        },
      },
      Hold: {
        left: {
          LeftHandThumb1: {
            x: 0.3207014958127321,
            y: 0.06495379554670028,
            z: 0.16660560371760758,
            w: 0.9301474456925973,
          },
          LeftHandThumb2: {
            x: -0.06426756147668378,
            y: -0.08314922394957613,
            z: -0.06931497418206412,
            w: 0.9920441399199413,
          },
          LeftHandThumb3: {
            x: 0.06742874956959258,
            y: 0.0840286091940701,
            z: 0.08927855606056317,
            w: 0.9901627074376589,
          },
          LeftHandThumb4: {
            x: -9.238620746199189e-8,
            y: -2.0255091159882e-8,
            z: -9.398913092262262e-8,
            w: 1.0000001550340198,
          },
          LeftHandIndex1: {
            x: 0.33199836920093073,
            y: 0.033870657246489584,
            z: -0.023397678397302276,
            w: 0.9423813203593585,
          },
          LeftHandIndex2: {
            x: 0.12883318579655545,
            y: -0.02628798315075484,
            z: -0.0038114797076547417,
            w: 0.9913106170798587,
          },
          LeftHandIndex3: {
            x: -0.0371847862922724,
            y: -0.016258135468178805,
            z: -0.02662508652005706,
            w: 0.9988215623184413,
          },
          LeftHandIndex4: {
            x: 0.031523501133650544,
            y: 0.4999923011376019,
            z: -0.16524762302146764,
            w: 0.8495337727796934,
          },
          LeftHandMiddle1: {
            x: 0.38801065642391386,
            y: -0.026710864171157707,
            z: -0.05202294098720764,
            w: 0.9197978129669437,
          },
          LeftHandMiddle2: {
            x: 0.20504435404515875,
            y: -0.012322075284278058,
            z: -0.0019589188881116238,
            w: 0.9786733968962247,
          },
          LeftHandMiddle3: {
            x: -0.008758680877562208,
            y: -0.042765326856819746,
            z: -0.000935168178430347,
            w: 0.9990466881157994,
          },
          LeftHandMiddle4: {
            x: -0.11335665998667754,
            y: 0.5229658154937249,
            z: -0.27119331054440243,
            w: 0.8000693987395182,
          },
          LeftHandRing1: {
            x: 0.35013689205214643,
            y: -0.08303808672375886,
            z: -0.09269185038226355,
            w: 0.928394957300529,
          },
          LeftHandRing2: {
            x: 0.20343727584963123,
            y: -0.037928891945919946,
            z: 0.00389979389561166,
            w: 0.9783455720131593,
          },
          LeftHandRing3: {
            x: 0.053745287653715,
            y: -0.007168237431806113,
            z: 0.029512046525480805,
            w: 0.9980926271534658,
          },
          LeftHandRing4: {
            x: 0.1153373028322906,
            y: -0.5651823200392166,
            z: 0.32610879660341335,
            w: -0.7489454810790123,
          },
          LeftHandPinky1: {
            x: 0.3406321462471743,
            y: -0.1771053967611723,
            z: -0.12230407022192077,
            w: 0.9152296305732681,
          },
          LeftHandPinky2: {
            x: 0.19280414172382015,
            y: -0.054971265356825685,
            z: -0.03411578474909736,
            w: 0.9791025163964657,
          },
          LeftHandPinky3: {
            x: -0.044437936871292716,
            y: -0.0008800045457874398,
            z: -0.04908607300417615,
            w: -0.9978049378703278,
          },
          LeftHandPinky4: {
            x: 0.10865198013704336,
            y: -0.650292222052655,
            z: 0.32953476830293515,
            w: -0.6758116107018113,
          },
        },
        right: {
          RightHandThumb1: {
            x: 0.2547056417025983,
            y: -0.028772950668218666,
            z: -0.18854731164965438,
            w: 0.9480226993992189,
          },
          RightHandThumb2: {
            x: -0.07141298092722076,
            y: 0.08315014510321578,
            z: -0.01452463559498049,
            w: 0.993868906849433,
          },
          RightHandThumb3: {
            x: 0.059074867503820905,
            y: -0.08195131006082107,
            z: 0.01506285718840844,
            w: 0.9947700148294287,
          },
          RightHandThumb4: {
            x: 1.817163802764199e-8,
            y: -1.7546668507062435e-8,
            z: -4.236388911893485e-8,
            w: 1.0000000605060335,
          },
          RightHandIndex1: {
            x: 0.3676173013514213,
            y: -0.033040314551500825,
            z: 0.02738178634453818,
            w: 0.9289865817382945,
          },
          RightHandIndex2: {
            x: 0.17136461530181885,
            y: 0.026341486446212967,
            z: 0.0026657473095845294,
            w: 0.9848518951193239,
          },
          RightHandIndex3: {
            x: -0.01754327945726869,
            y: 0.016363178867309335,
            z: 0.026315849781497463,
            w: 0.9993658231973463,
          },
          RightHandIndex4: {
            x: -0.03542545563314142,
            y: -0.38183537663249684,
            z: 0.16534596271984703,
            w: 0.9086294937665735,
          },
          RightHandMiddle1: {
            x: 0.43001846783239683,
            y: 0.032490889535084166,
            z: 0.05919633619301185,
            w: 0.900291190178713,
          },
          RightHandMiddle2: {
            x: 0.15696709389306873,
            y: 0.012112006494723323,
            z: 0.0025378935189103993,
            w: 0.9875263431635051,
          },
          RightHandMiddle3: {
            x: -0.04100048864150513,
            y: 0.03957033062156239,
            z: 0.0023425788163794203,
            w: 0.998372561677596,
          },
          RightHandMiddle4: {
            x: -0.06965300855130568,
            y: -0.4449324845259274,
            z: 0.2046723644706383,
            w: 0.8690758654146555,
          },
          RightHandRing1: {
            x: 0.46312373822260033,
            y: 0.10089494714151352,
            z: 0.09850812009057747,
            w: 0.8750044210882814,
          },
          RightHandRing2: {
            x: 0.11922336604162287,
            y: 0.03626304690716206,
            z: -0.0010367087921929856,
            w: 0.992204519743684,
          },
          RightHandRing3: {
            x: -0.006245952469431548,
            y: 0.00436003321272002,
            z: -0.029275498507586907,
            w: 0.999542421592434,
          },
          RightHandRing4: {
            x: -0.09749920228371511,
            y: -0.4965809167885777,
            z: 0.2560379934657614,
            w: 0.8236176290955038,
          },
          RightHandPinky1: {
            x: 0.48470801544621667,
            y: 0.2080685324189393,
            z: 0.1078914295143226,
            w: 0.8426891710045631,
          },
          RightHandPinky2: {
            x: 0.13989766462541747,
            y: 0.05067798059555827,
            z: 0.036557386554165204,
            w: 0.988192353141057,
          },
          RightHandPinky3: {
            x: 0.008341407357457031,
            y: -0.0007562317504844519,
            z: -0.04915927306805559,
            w: 0.9987558375611785,
          },
          RightHandPinky4: {
            x: -0.16689806944694158,
            y: -0.562660607848084,
            z: 0.3141993629516159,
            w: 0.7462149890359664,
          },
        },
      },
      Fist: {
        left: {
          LeftHandThumb1: {
            x: 0.36275260808303966,
            y: 0.08787559307546403,
            z: 0.1492867457229173,
            w: 0.9156430645501916,
          },
          LeftHandThumb2: {
            x: -0.04328830838651862,
            y: -0.08031386640196445,
            z: -0.287422388040085,
            w: 0.9534488076078491,
          },
          LeftHandThumb3: {
            x: 0.02136911959888993,
            y: 0.06566751379605541,
            z: -0.40869884585923383,
            w: 0.9100530771429721,
          },
          LeftHandThumb4: {
            x: 4.980659060183079e-7,
            y: 2.2289596174340787e-7,
            z: 7.399485851822263e-8,
            w: 1.000000173077237,
          },
          LeftHandIndex1: {
            x: 0.5051896866164718,
            y: 0.028599422931218515,
            z: -0.03871217002481567,
            w: 0.8616653353089815,
          },
          LeftHandIndex2: {
            x: 0.8099373918903314,
            y: -0.019342847563621132,
            z: 0.016712054968739464,
            w: 0.58595881747023,
          },
          LeftHandIndex3: {
            x: 0.5495683049756453,
            y: -0.016436941539568366,
            z: -0.01270599322205747,
            w: 0.8351905594532174,
          },
          LeftHandIndex4: {
            x: 0.7806733657665643,
            y: 0.31171173222993337,
            z: 0.5322509620574742,
            w: 0.10046698632695178,
          },
          LeftHandMiddle1: {
            x: 0.5838926811799462,
            y: -0.048319566696685266,
            z: -0.062105580103867394,
            w: 0.8080085283556837,
          },
          LeftHandMiddle2: {
            x: 0.7872172119369426,
            y: -0.011999720364192846,
            z: 0.006163980127504163,
            w: 0.6165281358680303,
          },
          LeftHandMiddle3: {
            x: 0.5036391476039889,
            y: -0.08697025298663885,
            z: 0.02151685106517648,
            w: 0.859256127726016,
          },
          LeftHandMiddle4: {
            x: 0.7865860295040161,
            y: 0.27171112725932206,
            z: 0.5341990905349189,
            w: 0.14861589747251597,
          },
          LeftHandRing1: {
            x: 0.6265590523750681,
            y: -0.11114669447318712,
            z: -0.06820807881217342,
            w: 0.7683867208743982,
          },
          LeftHandRing2: {
            x: -0.7414043166377955,
            y: 0.04118522927134002,
            z: -0.02284750011843653,
            w: -0.6694037927637967,
          },
          LeftHandRing3: {
            x: 0.5029183929496996,
            y: -0.02761300088442627,
            z: 0.027655461240376437,
            w: 0.8634500822541624,
          },
          LeftHandRing4: {
            x: 0.701945629717091,
            y: 0.25741518073529657,
            z: 0.6386639821269936,
            w: 0.1819838510899484,
          },
          LeftHandPinky1: {
            x: 0.6646398708768997,
            y: -0.1910666822542969,
            z: -0.005041203339383515,
            w: 0.7223034541512187,
          },
          LeftHandPinky2: {
            x: -0.7100505297230161,
            y: 0.08949490740562568,
            z: 0.0020939117205888355,
            w: -0.6984372222964488,
          },
          LeftHandPinky3: {
            x: 0.4799196194273102,
            y: 0.002293718033023088,
            z: 0.04278597285617744,
            w: 0.8762656779695184,
          },
          LeftHandPinky4: {
            x: 0.6432988429913946,
            y: 0.2624899904194881,
            z: 0.6899613123204875,
            w: 0.2030248822090026,
          },
        },
        right: {
          RightHandThumb1: {
            x: 0.3420058712374173,
            y: -0.10212201312691885,
            z: -0.12636759047473592,
            w: 0.9255453866107956,
          },
          RightHandThumb2: {
            x: -0.046809574274146004,
            y: 0.08103886654547388,
            z: 0.25328012153331325,
            w: 0.9628554510274545,
          },
          RightHandThumb3: {
            x: 0.029401277964089756,
            y: -0.0698983421243004,
            z: 0.33337283829466313,
            w: 0.9397403516709896,
          },
          RightHandThumb4: {
            x: 4.219391641913095e-7,
            y: 2.676973899495838e-7,
            z: -1.5359481489451987e-7,
            w: 0.9999999971083312,
          },
          RightHandIndex1: {
            x: 0.5210574268288868,
            y: -0.024190008213442367,
            z: 0.04669833203435239,
            w: 0.8518997707237508,
          },
          RightHandIndex2: {
            x: 0.8099374888248012,
            y: 0.019342547283577993,
            z: -0.016711358911023273,
            w: 0.5859587774150502,
          },
          RightHandIndex3: {
            x: 0.6008770098868975,
            y: 0.016093529300416697,
            z: 0.010921394707623175,
            w: 0.7991047874395751,
          },
          RightHandIndex4: {
            x: 0.6031195686202361,
            y: -0.446304071352814,
            z: -0.6079869265569812,
            w: 0.2596367107241048,
          },
          RightHandMiddle1: {
            x: 0.5706508626739966,
            y: 0.05133864777600006,
            z: 0.0691403252584163,
            w: 0.8166648662223644,
          },
          RightHandMiddle2: {
            x: 0.7819762598006504,
            y: 0.012040232133159265,
            z: -0.00607560295240005,
            w: 0.6231622132149435,
          },
          RightHandMiddle3: {
            x: 0.5200738177705743,
            y: 0.08814741195614195,
            z: -0.022240242071048744,
            w: 0.8492694906096465,
          },
          RightHandMiddle4: {
            x: 0.6316567726747174,
            y: -0.36032465666379543,
            z: -0.6347214853375365,
            w: 0.2613509770880267,
          },
          RightHandRing1: {
            x: 0.6341289306593298,
            y: 0.1111230178001979,
            z: 0.0662179775845773,
            w: 0.7623301816046094,
          },
          RightHandRing2: {
            x: -0.7372256257840198,
            y: -0.04123362097772555,
            z: 0.02269352256980716,
            w: -0.6740052864314521,
          },
          RightHandRing3: {
            x: 0.5203026538572035,
            y: 0.028380048696586738,
            z: -0.027432154428945185,
            w: 0.8530694146506811,
          },
          RightHandRing4: {
            x: 0.5301778250726485,
            y: -0.35541244735642336,
            z: -0.7036893444913468,
            w: 0.31211311076606946,
          },
          RightHandPinky1: {
            x: 0.6927906460203288,
            y: 0.17801407962340798,
            z: -0.01814708607130683,
            w: 0.6985862463823375,
          },
          RightHandPinky2: {
            x: -0.6780781071449782,
            y: -0.08790129503244763,
            z: -0.004664796809293326,
            w: -0.7296997219249738,
          },
          RightHandPinky3: {
            x: 0.4579578838684678,
            y: -0.0022267579748426365,
            z: -0.04337544869896971,
            w: 0.8879124089221322,
          },
          RightHandPinky4: {
            x: 0.4879104302327515,
            y: -0.32006618437824486,
            z: -0.7583090224414644,
            w: 0.2906344663041714,
          },
        },
      },
      "Thumb Up": {
        left: {
          LeftHandThumb1: {
            x: 0.06141834863074341,
            y: -0.1875768963292588,
            z: 0.31241717596218715,
            w: 0.9292139574194918,
          },
          LeftHandThumb2: {
            x: -0.07414072213002554,
            y: -0.08298516008815893,
            z: 0.048168024654927116,
            w: 0.9926211852363095,
          },
          LeftHandThumb3: {
            x: 0.07166093770762644,
            y: 0.08477103599588581,
            z: 0.1456104360088982,
            w: 0.9830954096517934,
          },
          LeftHandThumb4: {
            x: -3.862039960056407e-8,
            y: -2.7066806557174417e-7,
            z: -8.486932107087952e-8,
            w: 1.0000000539060125,
          },
          LeftHandIndex1: {
            x: 0.599426907426109,
            y: 0.023849087317135597,
            z: -0.04474906089076805,
            w: 0.7988219459438572,
          },
          LeftHandIndex2: {
            x: 0.8025730422972556,
            y: -0.019564190693019016,
            z: 0.016449138069486585,
            w: 0.5960059206099746,
          },
          LeftHandIndex3: {
            x: -0.5452133340039438,
            y: 0.016462392275372783,
            z: 0.012851684443024106,
            w: -0.8380373198559502,
          },
          LeftHandIndex4: {
            x: 0.750781345876081,
            y: 0.33364328009440775,
            z: 0.5108864968689643,
            w: 0.25299095417119155,
          },
          LeftHandMiddle1: {
            x: 0.654560873576213,
            y: -0.06851286592295054,
            z: -0.076026676979138,
            w: 0.7490503123676701,
          },
          LeftHandMiddle2: {
            x: 0.7646111011592703,
            y: -0.012166829958333368,
            z: 0.005788457450211577,
            w: 0.6443510637436309,
          },
          LeftHandMiddle3: {
            x: -0.5293510949227922,
            y: 0.0888039688544116,
            z: -0.02264833327512355,
            w: -0.8434386066725685,
          },
          LeftHandMiddle4: {
            x: 0.7469592179186694,
            y: 0.285800028754937,
            z: 0.5198795088281456,
            w: 0.3001591724009822,
          },
          LeftHandRing1: {
            x: 0.6974989020648038,
            y: -0.1180060107252854,
            z: -0.05832386050995042,
            w: 0.7043923384242188,
          },
          LeftHandRing2: {
            x: 0.721268824024577,
            y: -0.04140158108135969,
            z: 0.02210830458554637,
            w: 0.6910632397385014,
          },
          LeftHandRing3: {
            x: -0.5312562077634932,
            y: 0.028862612055735724,
            z: -0.02728391315723117,
            w: -0.8462799475351794,
          },
          LeftHandRing4: {
            x: 0.6684681716887172,
            y: 0.28232282331385394,
            z: 0.6078037876885212,
            w: 0.32251937523821095,
          },
          LeftHandPinky1: {
            x: 0.7372313800275729,
            y: -0.17158140904456265,
            z: 0.034793807112841385,
            w: 0.6525637742350886,
          },
          LeftHandPinky2: {
            x: -0.6644611571550342,
            y: 0.08719110678006624,
            z: 0.005724455966649389,
            w: -0.7421969620642928,
          },
          LeftHandPinky3: {
            x: -0.4891741401876455,
            y: -0.002321713019759402,
            z: -0.04252713436190087,
            w: -0.8711459106886748,
          },
          LeftHandPinky4: {
            x: 0.6401419024955893,
            y: 0.27268105777246654,
            z: 0.6606372624570755,
            w: 0.2818189220732754,
          },
        },
        right: {
          RightHandThumb1: {
            x: 0.08475239743800297,
            y: 0.17139713795949968,
            z: -0.31175653955950844,
            w: 0.9307243129979488,
          },
          RightHandThumb2: {
            x: -0.07399509111203728,
            y: 0.08299616830100184,
            z: -0.04634971948883168,
            w: 0.9927176235203969,
          },
          RightHandThumb3: {
            x: 0.07010027638263325,
            y: -0.08452457766725927,
            z: -0.12453274971766601,
            w: 0.9861202905774085,
          },
          RightHandThumb4: {
            x: 1.044269194727665e-7,
            y: 1.3993645334164917e-7,
            z: -1.848815459060127e-8,
            w: 1.0000000075243989,
          },
          RightHandIndex1: {
            x: 0.5774839204264188,
            y: -0.017153476348684225,
            z: 0.05602375255481402,
            w: 0.8142967847066483,
          },
          RightHandIndex2: {
            x: 0.7965851155176518,
            y: 0.01973935972525941,
            z: -0.01623667022468059,
            w: 0.6039857471460365,
          },
          RightHandIndex3: {
            x: -0.5470466479611205,
            y: -0.01645130013175164,
            z: -0.012790378825296165,
            w: -0.8368425384760625,
          },
          RightHandIndex4: {
            x: 0.754501446715993,
            y: -0.21784589417928385,
            z: -0.5788646063521496,
            w: 0.2195138615510443,
          },
          RightHandMiddle1: {
            x: 0.644083720182789,
            y: 0.06514852801724291,
            z: 0.07402172222741073,
            w: 0.7585726398091308,
          },
          RightHandMiddle2: {
            x: 0.7561087095742103,
            y: 0.012224144967091285,
            z: -0.005649177593010516,
            w: 0.6543074681373169,
          },
          RightHandMiddle3: {
            x: -0.52354419930515,
            y: -0.08839355491081435,
            z: 0.022392769940117283,
            w: -0.8471046005052058,
          },
          RightHandMiddle4: {
            x: 0.7509825849698035,
            y: -0.17738109627975418,
            z: -0.5803034854649899,
            w: 0.26040135746909565,
          },
          RightHandRing1: {
            x: 0.6644323142008697,
            y: 0.11968682626853576,
            z: 0.06907312676336261,
            w: 0.7344613680503523,
          },
          RightHandRing2: {
            x: -0.7299762685803913,
            y: -0.04131318390219922,
            z: 0.022427091411677,
            w: -0.6818538557556626,
          },
          RightHandRing3: {
            x: -0.5395823862954269,
            y: -0.029228280635295773,
            z: 0.027167869411545503,
            w: -0.8409866738538472,
          },
          RightHandRing4: {
            x: 0.6601790748871663,
            y: -0.17974642649447656,
            z: -0.6717472217953406,
            w: 0.2839196976206507,
          },
          RightHandPinky1: {
            x: 0.6749264247069198,
            y: 0.18936385653565113,
            z: -0.000008998150574909825,
            w: 0.713172830052529,
          },
          RightHandPinky2: {
            x: -0.730538030119345,
            y: -0.09045554934572797,
            z: -0.00038124674116207097,
            w: -0.6768542716159822,
          },
          RightHandPinky3: {
            x: -0.5284832173712275,
            y: 0.00244070951717271,
            z: 0.041356126161242374,
            w: -0.8479324150358086,
          },
          RightHandPinky4: {
            x: 0.5981265371478347,
            y: -0.20808044524052588,
            z: -0.714403235950125,
            w: 0.29761589583051407,
          },
        },
      },
      "Point + Thumb": {
        left: {
          LeftHandThumb1: {
            x: 0.05988997315681652,
            y: -0.1836243924729606,
            z: 0.30804746400519833,
            w: 0.9315591344433511,
          },
          LeftHandThumb2: {
            x: -0.07321652988216903,
            y: -0.08305227590943934,
            z: 0.03665862795530489,
            w: 0.9931758248809024,
          },
          LeftHandThumb3: {
            x: 0.07217906298529775,
            y: 0.08484529190867363,
            z: 0.15269368241010306,
            w: 0.9819758478560909,
          },
          LeftHandThumb4: {
            x: -6.01823461621187e-8,
            y: -2.9058630135470054e-7,
            z: -6.767125687590081e-8,
            w: 1.0000000778220115,
          },
          LeftHandIndex1: {
            x: 0.2538486797575256,
            y: 0.019358102822264932,
            z: -0.08821932223105935,
            w: 0.963018094464608,
          },
          LeftHandIndex2: {
            x: 0.024745042842462983,
            y: -0.02595580801170647,
            z: -0.00655918133374791,
            w: 0.9993356390225137,
          },
          LeftHandIndex3: {
            x: -0.07203370756300648,
            y: -0.016056440607994653,
            z: -0.027149128960063544,
            w: 0.9969033106354475,
          },
          LeftHandIndex4: {
            x: -0.0344994277983387,
            y: 0.6788457799699479,
            z: -0.03912202205118476,
            w: 0.7324258890072646,
          },
          LeftHandMiddle1: {
            x: 0.6762550380166014,
            y: -0.06977448207990347,
            z: -0.07292950325960643,
            w: 0.7297207138368906,
          },
          LeftHandMiddle2: {
            x: 0.7860359080888315,
            y: -0.012008985735130612,
            z: 0.006144037681468489,
            w: 0.6180336333581077,
          },
          LeftHandMiddle3: {
            x: -0.540335838529401,
            y: 0.08957294709067012,
            z: -0.02313187726127204,
            w: -0.8363487864034354,
          },
          LeftHandMiddle4: {
            x: 0.7027623852421161,
            y: 0.32381023066901604,
            z: 0.5280130397820977,
            w: 0.3499631164814056,
          },
          LeftHandRing1: {
            x: 0.7149322030901477,
            y: -0.10857088430978631,
            z: -0.0438838516466301,
            w: 0.6893177083683427,
          },
          LeftHandRing2: {
            x: 0.7408711711182986,
            y: -0.04119150561398243,
            z: 0.022828059104158208,
            w: 0.6699940837631069,
          },
          LeftHandRing3: {
            x: 0.5264469599724568,
            y: -0.028650830231568707,
            z: 0.02734948484184758,
            w: 0.8492846491137952,
          },
          LeftHandRing4: {
            x: 0.637126884970279,
            y: 0.3081029973460658,
            z: 0.617477831216016,
            w: 0.34331190533752454,
          },
          LeftHandPinky1: {
            x: 0.7314821846927018,
            y: -0.15296570782719526,
            z: 0.052868255478531696,
            w: 0.6623750000637417,
          },
          LeftHandPinky2: {
            x: -0.6908423408265494,
            y: 0.08855058589578933,
            z: 0.003652359216473805,
            w: -0.7175530217858076,
          },
          LeftHandPinky3: {
            x: -0.504172313230857,
            y: -0.0023673215125948714,
            z: -0.04209424382469845,
            w: -0.8625731515894741,
          },
          LeftHandPinky4: {
            x: 0.6137938428279707,
            y: 0.30058453836341753,
            z: 0.6690007719446736,
            w: 0.2921371286064945,
          },
        },
        right: {
          RightHandThumb1: {
            x: 0.0590719294527412,
            y: 0.1799604644038139,
            z: -0.3043955278145841,
            w: 0.9335245002592898,
          },
          RightHandThumb2: {
            x: -0.07278522546735078,
            y: 0.08307954138505855,
            z: -0.03132468083361245,
            w: 0.9933877126746693,
          },
          RightHandThumb3: {
            x: 0.07111015422440228,
            y: -0.08468787302425865,
            z: -0.1381285933305742,
            w: 0.9842214923170298,
          },
          RightHandThumb4: {
            x: 1.3011050625788556e-7,
            y: 2.05558404631212e-7,
            z: -1.102226110383242e-8,
            w: 1.0000000030074512,
          },
          RightHandIndex1: {
            x: 0.2101538653393668,
            y: -0.014628738217075471,
            z: 0.1309847493985643,
            w: 0.9687436399077297,
          },
          RightHandIndex2: {
            x: 0.053389941207094005,
            y: 0.026075331641150418,
            z: 0.005810913180346166,
            w: 0.9982163160390567,
          },
          RightHandIndex3: {
            x: -0.07058497316237872,
            y: 0.01606484988527703,
            z: 0.027127543164029575,
            w: 0.9970073894859375,
          },
          RightHandIndex4: {
            x: -0.05834785808825721,
            y: -0.685023397187664,
            z: 0.01738405148269201,
            w: 0.7259727709359161,
          },
          RightHandMiddle1: {
            x: 0.6472928720004409,
            y: 0.06666553899502266,
            z: 0.0752705199963544,
            w: 0.7555804948005106,
          },
          RightHandMiddle2: {
            x: 0.8070495341058509,
            y: 0.01183286289223104,
            z: -0.006500714143802734,
            w: 0.5903293865882036,
          },
          RightHandMiddle3: {
            x: -0.5389962973620452,
            y: -0.08947938097750834,
            z: 0.023073058468010423,
            w: -0.8372237927787599,
          },
          RightHandMiddle4: {
            x: 0.7042818903230272,
            y: -0.3342415522607989,
            z: -0.5178089940941625,
            w: 0.35233989867386306,
          },
          RightHandRing1: {
            x: 0.6788467544215503,
            y: 0.10545906494930246,
            z: 0.0484532837021243,
            w: 0.7250500951419909,
          },
          RightHandRing2: {
            x: 0.7587120142746567,
            y: 0.040963021980187635,
            z: -0.02348595314026222,
            w: 0.6497125804487822,
          },
          RightHandRing3: {
            x: -0.5008199037595493,
            y: -0.02752002770378599,
            z: 0.027681686687389146,
            w: -0.8646711084556123,
          },
          RightHandRing4: {
            x: 0.6513491850087749,
            y: -0.2882300330650265,
            z: -0.6262954165671477,
            w: 0.3168937709160128,
          },
          RightHandPinky1: {
            x: 0.6899208182205407,
            y: 0.1661168797946801,
            z: -0.031433778009216276,
            w: 0.7038652257135801,
          },
          RightHandPinky2: {
            x: 0.7398545497181717,
            y: 0.09087550689313763,
            z: -0.0004165409160116762,
            w: 0.6666008360555412,
          },
          RightHandPinky3: {
            x: 0.5000930048632144,
            y: -0.002355333386206016,
            z: -0.04221382845810823,
            w: 0.8649391595607601,
          },
          RightHandPinky4: {
            x: 0.6001442639295909,
            y: -0.3075723703879651,
            z: -0.665989745703486,
            w: 0.3188789270958159,
          },
        },
      },
    };

    this.gripDown = {};
    this.sides.forEach((side) => {
      const handControls = this.data[`${side}HandControls`];
      if (handControls) {
        handControls.addEventListener("controllerconnected", (event) => {
          this.isHandControlsConnected[side] = true;
        });
        handControls.addEventListener("controllerdisconnected", (event) => {
          this.isHandControlsConnected[side] = false;
        });
        handControls.addEventListener("gripdown", (event) => {
          this.gripDown[side] = true;
          if (this.gripDown.left && this.gripDown.right) {
            this.gripCalibrateTimeoutId = window.setTimeout(() => {
              this.calibrate();
            }, 1000);
          }
        });
        handControls.addEventListener("gripup", (event) => {
          this.gripDown[side] = false;
          window.clearTimeout(this.gripCalibrateTimeoutId);
        });
      }
    });

    const handControlsCorrectionEuler = new THREE.Euler();
    this.handControlsEulers = {};
    this.handControlsQuaternions = {};
    this.handControlsQuaternionInverses = {};
    this.handControlsCorrectionQuaternions = {};
    Object.values(this.RPM_HAND_PREFIX).forEach((prefix) => {
      const isLeft = prefix.includes("Left");
      const suffix = "";

      this.handControlsEulers[prefix + suffix] = new THREE.Euler();
      this.handControlsQuaternions[prefix + suffix] = new THREE.Quaternion();
      this.handControlsQuaternionInverses[prefix + suffix] =
        new THREE.Quaternion();

      const q = (this.handControlsCorrectionQuaternions[prefix + suffix] =
        new THREE.Quaternion());
      const e = handControlsCorrectionEuler;
      switch (suffix) {
        case "":
          const sign = isLeft ? 1 : -1;
          if (this.data.mirrorMode) {
            e.set(Math.PI / 2, (sign * -Math.PI) / 2, 0);
          } else {
            e.set(-Math.PI / 2, (sign * Math.PI) / 2, 0);
          }
          break;
        default:
          break;
      }
      q.setFromEuler(e);
    });

    this.recordedData = [];

    this.webSocketMissionDevices = {};
    this.devices = [];
    this.namedDevices = {};

    this.positions = {};
    this.positionOffsets = {};
    this.quaternionOffsets = {};
    this.yawQuaternionOffsets = {};
    this.pitchRollQuaternionOffsets = {};
    this.quaternions = {};
    this.updatedQuaternion = {};
    this.correctionQuaternions = {};
    this.mirrorModeEulers = {};
    this.mirrorModeQuaternions = {};
    {
      const { correctionQuaternions } = this;

      const _euler = new THREE.Euler();
      window._euler = _euler;

      _euler.set(0, Math.PI, 0);
      correctionQuaternions.head = new THREE.Quaternion().setFromEuler(_euler);

      _euler.set(-Math.PI / 2, Math.PI, -Math.PI / 2);
      correctionQuaternions.upperTorso = new THREE.Quaternion().setFromEuler(
        _euler
      );
      _euler.set(Math.PI / 2, Math.PI, -Math.PI / 2);
      correctionQuaternions.lowerTorso = new THREE.Quaternion().setFromEuler(
        _euler
      );

      _euler.set(0, 0, 0);
      correctionQuaternions.leftBicep = new THREE.Quaternion().setFromEuler(
        _euler
      );
      correctionQuaternions.leftForearm = new THREE.Quaternion().setFromEuler(
        _euler
      );
      correctionQuaternions.leftHand = new THREE.Quaternion().setFromEuler(
        _euler
      );

      _euler.set(0, Math.PI, 0);
      correctionQuaternions.rightBicep = new THREE.Quaternion().setFromEuler(
        _euler
      );
      correctionQuaternions.rightForearm = new THREE.Quaternion().setFromEuler(
        _euler
      );
      correctionQuaternions.rightHand = new THREE.Quaternion().setFromEuler(
        _euler
      );

      _euler.set(-Math.PI / 2, 0, Math.PI / 2);
      correctionQuaternions.leftThigh = new THREE.Quaternion().setFromEuler(
        _euler
      );
      _euler.set(-Math.PI / 2, 0, Math.PI / 2, "XYZ");
      correctionQuaternions.leftShin = new THREE.Quaternion().setFromEuler(
        _euler
      );

      _euler.set(0, Math.PI, 0, "XYZ");
      correctionQuaternions.leftFoot = new THREE.Quaternion().setFromEuler(
        _euler
      );

      _euler.set(-Math.PI / 2, 0, Math.PI / 2);
      correctionQuaternions.rightThigh = new THREE.Quaternion().setFromEuler(
        _euler
      );
      _euler.set(-Math.PI / 2, 0, Math.PI / 2, "XYZ");
      correctionQuaternions.rightShin = new THREE.Quaternion().setFromEuler(
        _euler
      );

      _euler.set(0, Math.PI, 0, "XYZ");
      correctionQuaternions.rightFoot = new THREE.Quaternion().setFromEuler(
        _euler
      );
    }

    {
      const euler = new THREE.Euler();
      const quaternion = new THREE.Quaternion();

      euler.x = Math.PI;
      quaternion.setFromEuler(euler);
      this.flipQuaternion = quaternion.clone();

      euler.x = 0;
      euler.y = Math.PI;
      quaternion.setFromEuler(euler);
      this.flipFootQuaternion = quaternion.clone();
    }

    this.anchors = {};
    this.sides.forEach((side) => {
      this.anchors[side] = {};

      const entity = document.createElement("a-entity");
      entity.id = `${side}Anchor`;
      entity.object3D.visible = false;

      const primitive = document.createElement("a-ring");
      primitive.setAttribute("position", `0 0.001 0.1`);
      primitive.setAttribute("rotation", "-90 0 0");
      primitive.setAttribute("radius-inner", 0);
      primitive.setAttribute("radius-outer", 0.2);
      primitive.setAttribute("color", "blue");
      if (this.data.hidePressure) {
        primitive.setAttribute("visible", "false");
      }

      entity.appendChild(primitive);
      this.el.appendChild(entity);

      this.anchors[side].entity = entity;
      this.anchors[side].primitive = primitive;
    });

    this.names = ["head", "upperTorso", "lowerTorso"];
    this.symmetricalNames = [
      "bicep",
      "forearm",
      "hand",
      "thigh",
      "shin",
      "foot",
    ];
    this.sides.forEach((side) => {
      this.symmetricalNames.forEach((name) => {
        const capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);
        this.names.push(side + capitalizedName);
      });
    });
    this.names.forEach((name) => {
      this.quaternions[name] = new THREE.Quaternion();
      this.quaternionOffsets[name] = new THREE.Quaternion();
      this.yawQuaternionOffsets[name] = new THREE.Quaternion();
      this.pitchRollQuaternionOffsets[name] = new THREE.Quaternion();
      this.positions[name] = new THREE.Vector3();
      this.positionOffsets[name] = new THREE.Vector3();

      this.mirrorModeQuaternions[name] = new THREE.Quaternion();
      this.mirrorModeEulers[name] = new THREE.Euler();
    });

    this.bones = {};
    this.boneMapping = {
      head: "Head",
      upperTorso: "Spine1",
      lowerTorso: "Hips",

      leftBicep: "LeftArm",
      leftForearm: "LeftForeArm",
      leftHand: "LeftHand",

      rightBicep: "RightArm",
      rightForearm: "RightForeArm",
      rightHand: "RightHand",

      rightThigh: "RightUpLeg",
      rightShin: "RightLeg",
      rightFoot: "RightFoot",

      leftThigh: "LeftUpLeg",
      leftShin: "LeftLeg",
      leftFoot: "LeftFoot",
    };
    this.getKeyForBoneName = (boneName) => {
      let key;
      for (let _key in this.boneMapping) {
        if (this.boneMapping[_key] == boneName) {
          key = _key;
          break;
        }
      }
      return key;
    };

    this.allBones = {};
    this.el.addEventListener("model-loaded", (event) => {
      this.model = this.el.components["gltf-model"].model;
      this.el.components["gltf-model"].model.traverse((object) => {
        if (!this.data.thirdPerson && this.data.layer >= 0) {
          object.layers.set(this.data.layer);
        }
        if (object.type == "Bone") {
          const bone = object;
          this.allBones[bone.name] = bone;
          const key = this.getKeyForBoneName(bone.name);
          if (key) {
            bone._key = key;
            this.bones[bone.name] = bone;
          }
        }
      });

      this.feetObjects = {};
      this.sides.forEach((side) => {
        const object = new THREE.Object3D();
        this.feetObjects[side] = object;
        object.position.x = 0.03;
        if (side == "right") {
          object.position.x *= -1;
        }
        object.position.y = -0.22;
        object.name = `${side}FootObject`;
        const capitalizedSide = side.charAt(0).toUpperCase() + side.slice(1);
        this.allBones[`${capitalizedSide}Toe_End`].add(object);
      });

      this.updateEntityAutoUpdate();
    });

    const anchorConfiguration = (this.anchorConfiguration = {
      masses: { left: 0, right: 0 },
      thresholds: { left: 0.05, right: 0.05 }, // goback
      updatedMass: {},
      updatedAnchor: false,
      isAnchored: false,
      side: "",
      position: new THREE.Vector3(),
      exceededThresholds: { left: false, right: false },
      updatedThresholds: { left: false, right: false },
    });

    this.udpMissionDevices = new UDPMissionDevices();
    this.udpMissionDevices.addEventListener("numberofdevices", (event) => {
      this.udpMissionDevices.devices.forEach((device) => {
        this._setupDevice(device);
      });
    });

    this.el.addEventListener("connect", (event) => this.connect());
    this.el.addEventListener("connectudp", (event) => this.connectUDP());
    this.el.addEventListener("addbluetoothdevice", (event) =>
      this._addBluetoothDevice()
    );
    this.el.addEventListener("calibrate", (event) =>
      this.calibrate(event.detail.delay)
    );
    this.el.addEventListener("enablesensors", (event) => this.enableSensors());

    this.system.addEntity(this);
  },
  connect: async function () {
    if (false) {
      this.data.gateway.reduce(async (promise, gateway) => {
        await promise;
        console.log(promise, gateway);
        let websocketMissionDevice = this.webSocketMissionDevices[gateway];
        if (websocketMissionDevice) {
          console.log("connecting");
          return websocketMissionDevice.connect(gateway);
        } else {
          console.log("_addWebSocketDevice");
          return this._addWebSocketDevice(gateway);
        }
      }, Promise.resolve());
    } else {
      this.data.gateway.forEach(async (gateway) => {
        // FIX
        if (gateway != "192.168.6.23" && gateway != "192.168.6.24") {
          //return
        }
        let websocketMissionDevice = this.webSocketMissionDevices[gateway];
        if (websocketMissionDevice) {
          await websocketMissionDevice.connect(gateway);
        } else {
          await this._addWebSocketDevice(gateway);
        }
      });
    }
  },
  connectUDP: async function () {
    if (!this.udpMissionDevices.isConnected) {
      this.udpMissionDevices.connect(this.data.udp);
    }
  },
  enableSensors: async function () {
    if (false) {
      this.data.gateway.reduce(async (promise, gateway) => {
        await promise;
        let websocketMissionDevice = this.webSocketMissionDevices[gateway];
        if (websocketMissionDevice) {
          return websocketMissionDevice.setSensorDataConfigurations(
            websocketMissionDevice.__sensorDataConfigurations
          );
        }
        return promise;
      }, Promise.resolve());
    } else {
      this.data.gateway.forEach(async (gateway) => {
        let websocketMissionDevice = this.webSocketMissionDevices[gateway];
        if (websocketMissionDevice) {
          await websocketMissionDevice.setSensorDataConfigurations(
            websocketMissionDevice.__sensorDataConfigurations
          );
        }
      });
    }
  },
  _setupDevice: async function (device) {
    const { anchorConfiguration } = this;

    this.devices.push(device);

    const sensorDataConfigurations = { motion: {}, pressure: {} };

    const name = await device.getName();
    console.log(`connected to ${name}`);
    this.namedDevices[name] = device;
    const deviceType = await device.getType();
    if (device.isInsole) {
      device.addEventListener("mass", (event) => {
        if (this._hasCalibratedAtLeastOnce) {
          this._tickFlag = true;

          const side = name.includes("left") ? "left" : "right";
          const { mass } = event.message;
          anchorConfiguration.masses[side] = mass;
          const threshold = anchorConfiguration.thresholds[side];
          const previouslyExceededThreshold =
            anchorConfiguration.exceededThresholds[side];
          const exceededThreshold = mass >= threshold;
          anchorConfiguration.exceededThresholds[side] = exceededThreshold;
          const updatedThreshold =
            anchorConfiguration.updatedThresholds[side] ||
            exceededThreshold != previouslyExceededThreshold;
          anchorConfiguration.updatedThresholds[side] = updatedThreshold;

          if (anchorConfiguration.isAnchored) {
            if (side == anchorConfiguration.side) {
              if (!exceededThreshold) {
                anchorConfiguration.isAnchored = false;
                delete anchorConfiguration.updatedAnchor;
              }
            }
          } else {
            if (exceededThreshold) {
              anchorConfiguration.isAnchored = true;
              anchorConfiguration.side = side;
              anchorConfiguration.updatedAnchor = true;
            }
          }

          anchorConfiguration.updatedMass[side] = true;
        }
      });

      sensorDataConfigurations.pressure.mass = this.data.rate;
    }

    device.addEventListener("quaternion", (event) => {
      if (this.names.includes(name)) {
        this._tickFlag = true;

        let _name = name;
        if (this.data.mirrorMode) {
          if (name.includes("left")) {
            _name = _name.replace("left", "right");
          } else {
            _name = _name.replace("right", "left");
          }
        }

        const { quaternion } = event.message;
        if (_name in this.correctionQuaternions) {
          if (this.data.flip) {
            if (_name.includes("Foot")) {
              quaternion.multiply(this.flipFootQuaternion);
            } else {
              quaternion.multiply(this.flipQuaternion);
            }
          }

          this.quaternions[_name].multiplyQuaternions(
            quaternion,
            this.correctionQuaternions[_name]
          );
        } else {
          this.quaternions[_name].copy(quaternion);
        }

        this.updatedQuaternion[_name] = true;
      }
    });

    sensorDataConfigurations.motion.quaternion = this.data.rate;

    await device.setSensorDataConfigurations(sensorDataConfigurations);
    device.__sensorDataConfigurations = sensorDataConfigurations;

    device.addEventListener("connected", async (event) => {
      await device.setSensorDataConfigurations(sensorDataConfigurations);
    });

    device.addEventListener("isConnected", (event) => {
      console.log("isConnected", event.message.isConnected, name);
    });
  },
  _addBluetoothDevice: async function () {
    console.log("getting device");
    const bluetoothMissionDevice = new BluetoothMissionDevice();
    await bluetoothMissionDevice.connect();
    console.log("got bluetooth mission device", bluetoothMissionDevice);
    await this._setupDevice(bluetoothMissionDevice);
    bluetoothMissionDevice.peers.forEach(async (peer) => {
      let isConnected = await peer._isConnected();
      if (isConnected) {
        await this._setupDevice(peer);
      } else {
        peer.addEventListener(
          "connected",
          async () => {
            await this._setupDevice(peer);
          },
          { once: true }
        );
      }
    });
    return bluetoothMissionDevice;
  },
  _addWebSocketDevice: async function (gateway) {
    const webSocketMissionDevice = new WebSocketMissionDevice();
    await webSocketMissionDevice.connect(gateway);
    console.log("got websocket mission device", webSocketMissionDevice);
    this.webSocketMissionDevices[gateway] = webSocketMissionDevice;
    await this._setupDevice(webSocketMissionDevice);
    return webSocketMissionDevice;
  },
  calibrate: function (delay) {
    setTimeout(() => this._calibrate(), delay);
  },
  _calibrate: function () {
    console.log("calibrating");
    this.isCalibrating = true;

    if (this.data.camera) {
      const { position, rotation } = this.el.object3D;
      const cameraObject = this.data.camera.object3D;
      cameraObject.getWorldQuaternion(this.cameraWorldQuaternion);
      this.cameraWorldEuler.setFromQuaternion(this.cameraWorldQuaternion);
      this.cameraWorldEuler.reorder("YXZ");

      if (this.data.mirrorMode) {
        rotation.y = this.cameraWorldEuler.y;
      } else {
        rotation.y = this.cameraWorldEuler.y + Math.PI;
      }

      cameraObject.getWorldPosition(this.cameraCalibration.position);
      cameraObject.getWorldQuaternion(this.cameraCalibration.quaternion);
      this.cameraCalibration.rotation.setFromQuaternion(
        this.cameraCalibration.quaternion
      );
      this.cameraCalibration.rotation.reorder("YXZ");

      this.cameraCalibration._rotation.copy(cameraObject.rotation);
      this.cameraCalibration._rotation.reorder("YXZ");
    }
    if (false && this.data.camera) {
      const { position, rotation, quaternion } = this.cameraCalibration;
      const cameraObject = this.data.camera.object3D;
      cameraObject.getWorldPosition(position);
      cameraObject.getWorldQuaternion(quaternion);
      rotation.setFromQuaternion(quaternion);
    }
    //this.overrideHeadUpdate = true;

    this.names.forEach((name) => {
      this.quaternionOffsets[name].copy(this.quaternions[name]).invert();

      const euler = new THREE.Euler();
      euler.order = "YXZ";

      euler.setFromQuaternion(this.quaternionOffsets[name]);
      euler.x = euler.z = 0;
      this.yawQuaternionOffsets[name].setFromEuler(euler);

      euler.order = "XZY";
      euler.setFromQuaternion(this.quaternionOffsets[name]);
      euler.y = 0;
      this.pitchRollQuaternionOffsets[name].setFromEuler(euler);
    });

    this._hasCalibratedAtLeastOnce = true;

    this.anchorConfiguration.isAnchored = false;
    Object.assign(this.anchorConfiguration.masses, { left: 0, right: 0 });
    Object.assign(this.anchorConfiguration.updatedMass, {
      left: true,
      right: true,
    });

    this.sides.forEach((side) => {
      this.anchors[side].entity.object3D.visible = false;
    });
    this.isCalibrating = false;
  },
  startRecording: function () {
    this.recordedData.length = 0; // [...{timestamp, position?, quaternions: {deviceName: quaternion}}]
    this._isRecording = true;
  },
  stopRecording: function () {
    this._isRecording = false;
    const { recordedData } = this;
    if (recordedData.length > 0) {
      recordedData.duration = Math.ceil(
        recordedData[recordedData.length - 1].timestamp
      );
    }
  },
  getRecordingDatumByTime(time) {
    const { recordedData } = this;

    return recordedData.find((_, index) => {
      const nextDatum = recordedData[index + 1];
      return !nextDatum || nextDatum.timestamp > time;
    });
  },
  tick: function (time, timeDelta) {
    if (this.data.thirdPerson) {
      return;
    }
    if (this.isCalibrating) {
      return;
    }

    if (this.data.camera?.object3D) {
      this._updatePositionFromCamera();
      this._updateHeadFromCamera();
    }

    if (this._tickFlag) {
      this._tick(...arguments);
      delete this._tickFlag;
    }

    this.sides.forEach((side) => {
      if (this.data[`${side}HandTrackingControls`]) {
        this._updateHandTrackingControls(side);
      }
      if (this.data[`${side}HandControls`]) {
        this._updateHandControls(side);
      }
    });

    for (const key in this.timelines) {
      const timeline = this.timelines[key];
      timeline._time += timeDelta;
      timeline.tick(timeline._time);
      if (timeline.completed) {
        delete this.timelines[key];
      }
    }
  },
  _updateHeadFromCamera: function () {
    if (this.data.camera?.object3D && this.model) {
      const cameraObject = this.data.camera.object3D;
      cameraObject.getWorldQuaternion(this.cameraWorldQuaternion);
      if (
        !this.overrideHeadUpdate &&
        this.cameraWorldQuaternion.angleTo(this.lastCameraQuaternion) < 0.001
      ) {
        return;
      }
      this.overrideHeadUpdate = false;
      this.lastCameraQuaternion.copy(this.cameraWorldQuaternion);

      const name = "head";
      this.quaternions[name].multiplyQuaternions(
        this.cameraWorldQuaternion,
        this.correctionQuaternions[name]
      );
      this.updatedQuaternion[name] = true;

      this._tickFlag = true;
    }
  },
  _updatePositionFromCamera: function () {
    if (this.data.camera) {
      const { position, rotation } = this.el.object3D;
      const cameraObject = this.data.camera.object3D;
      cameraObject.getWorldPosition(this.cameraWorldPosition);
      const newPosition = this._cameraPosition;

      if (this.data.mirrorMode) {
        const positionOffset = this._cameraPositionOffset;
        const positionEulerOffset = this._cameraPositionEulerOffset;

        // default model position
        newPosition.copy(this.cameraCalibration.position);
        positionOffset.set(0, 0, -1);
        positionEulerOffset.set(0, this.cameraCalibration.rotation.y, 0);
        positionOffset.applyEuler(positionEulerOffset);
        newPosition.add(positionOffset);

        // current camera position relative to calibrated camera position
        positionOffset.subVectors(
          this.cameraWorldPosition,
          this.cameraCalibration.position
        );

        // reflect along 'z' axis
        const reflection = this.cameraCalibration.reflection;
        reflection.set(0, 0, -1);
        reflection.applyEuler(positionEulerOffset);
        positionOffset.reflect(reflection);

        // apply reflected camera offset to model
        newPosition.add(positionOffset);
      } else {
        newPosition.copy(this.cameraWorldPosition);
      }

      newPosition.y = this.cameraWorldPosition.y - 1.75;

      if (position.distanceTo(newPosition) > 0.001) {
        position.copy(newPosition);
      }
    }
  },
  _tick: function (time) {
    let recordingDatum;
    const { recordedData } = this;
    if (this._isRecording) {
      recordingDatum = { quaternions: {} };
      if (recordedData.length == 0) {
        recordingDatum.timestamp = 0;
        recordedData.baseTime = time;
      } else {
        recordingDatum.timestamp = time - recordedData.baseTime;
      }
    }

    const { anchorConfiguration } = this;
    for (const name in this.updatedQuaternion) {
      const bone = this.getBoneByName(name);
      if (bone && this.updatedQuaternion[name]) {
        const quaternion = this.quaternions[name];

        const quaternionOffset = this.quaternionOffsets[name];
        const yawQuaternionOffset = this.yawQuaternionOffsets[name];
        const pitchRollQuaternionOffset = this.pitchRollQuaternionOffsets[name];

        const yawEuler = new THREE.Euler().setFromQuaternion(quaternion);
        yawEuler.reorder("YXZ");
        yawEuler.x = yawEuler.z = 0;
        const yawQuaternion = new THREE.Quaternion().setFromEuler(yawEuler);
        const inverseYawQuaternion = yawQuaternion.clone().invert();

        const modifiedQuaternion = quaternion
          .clone()
          .premultiply(inverseYawQuaternion)
          .premultiply(pitchRollQuaternionOffset)
          .premultiply(yawQuaternion)
          .premultiply(yawQuaternionOffset);

        bone.modifiedQuaternion = modifiedQuaternion;
      }
    }

    const euler = new THREE.Euler();
    const postCorrectionEuler = new THREE.Euler().reorder("YXZ");
    const postCorrectionQuaternion = new THREE.Quaternion();
    this.el.components["gltf-model"].model?.traverse((object) => {
      if (object.type == "Bone") {
        const bone = object;
        const name = bone._key;
        if (bone.modifiedQuaternion) {
          const { modifiedQuaternion } = bone;

          window._defaultEuler = window._defaultEuler || new THREE.Euler();
          if (window._defaultEuler) {
            const q = new THREE.Quaternion().setFromEuler(window._defaultEuler);
            modifiedQuaternion.multiply(q);
          }

          // FIX
          if (!this.data.mirrorMode) {
            const euler = this.mirrorModeEulers[name];
            euler.setFromQuaternion(modifiedQuaternion);
            let updateBone = true;
            switch (name) {
              // FIX
              case "upperTorso":
                euler.reorder("YXZ");
                euler.x *= -1;
                euler.z *= -1;
                break;
              case "lowerTorso":
                euler.reorder("YXZ");
                //euler.x *= -1;
                //euler.z *= -1;
                break;
              case "leftForearm":
              case "leftBicep":
              case "rightForearm":
              case "rightBicep":
                euler.reorder("YXZ");
                //euler.x *= -1;
                //euler.y *= -1;
                break;
              case "head":
              case "upperTorso":
              case "lowerTorso":
              case "rightThigh":
              case "rightShin":
              case "leftThigh":
              case "leftShin":
                euler.reorder("YXZ");
                //euler.z *= -1;
                //euler.y *= -1;
                break;
              case "leftFoot":
              case "rightFoot":
                euler.reorder("YXZ");
                euler.x *= -1;
                euler.z *= -1;
                break;
              default:
                updateBone = false;
                break;
            }
            if (updateBone) {
              modifiedQuaternion.setFromEuler(euler);
            }
          } else {
            const euler = this.mirrorModeEulers[name];
            euler.setFromQuaternion(modifiedQuaternion);
            let updateBone = true;
            switch (name) {
              case "upperTorso":
                euler.reorder("YXZ");
                euler.x *= -1;
                euler.y *= -1;
                break;
              case "leftForearm":
              case "leftBicep":
              case "rightForearm":
              case "rightBicep":
                euler.reorder("YXZ");
                euler.x *= -1;
                euler.y *= -1;
                break;
              case "head":
              case "upperTorso":
              case "lowerTorso":
              case "rightThigh":
              case "rightShin":
              case "leftThigh":
              case "leftShin":
                euler.reorder("YXZ");
                euler.z *= -1;
                euler.y *= -1;
                break;
              case "leftFoot":
              case "rightFoot":
                euler.reorder("YXZ");
                euler.x *= -1;
                euler.y *= -1;
                break;
              default:
                updateBone = false;
                break;
            }
            if (updateBone) {
              modifiedQuaternion.setFromEuler(euler);
            }
          }

          bone.parent
            .getWorldQuaternion(bone.quaternion)
            .invert()
            .multiply(this.el.object3D.quaternion)
            .multiply(modifiedQuaternion);

          euler.setFromQuaternion(bone.quaternion);
          postCorrectionEuler.set(0, 0, 0);
          switch (name) {
            case "head":
              break;
            // FIX
            case "upperTorso":
              euler.reorder("YXZ");
              if (!this.data.mirrorMode) {
                //euler.x *= -1;
                //euler.z *= -1;
              }
              bone.rotation.copy(euler);
              break;
            case "lowerTorso":
              euler.reorder("YXZ");
              if (!this.data.mirrorMode) {
                //euler.y *= -1;
                //euler.z *= -1;
              }
              bone.rotation.copy(euler);
              break;
            case "leftBicep":
            case "leftForearm":
            case "leftHand":
              postCorrectionEuler.x = Math.PI / 2;
              postCorrectionEuler.y = Math.PI / 2;
              postCorrectionQuaternion.setFromEuler(postCorrectionEuler);
              bone.quaternion.multiply(postCorrectionQuaternion);
              break;
            case "rightBicep":
            case "rightForearm":
            case "rightHand":
              postCorrectionEuler.x = Math.PI / 2;
              postCorrectionEuler.y = -Math.PI / 2;
              postCorrectionQuaternion.setFromEuler(postCorrectionEuler);
              bone.quaternion.multiply(postCorrectionQuaternion);
              break;
            case "leftThigh":
            case "rightThigh":
            case "leftShin":
            case "rightShin":
            case "leftFoot":
            case "rightFoot":
              if (name.includes("Foot")) {
                postCorrectionEuler.x = -1.07;
              }
              postCorrectionEuler.z = Math.PI;
              postCorrectionQuaternion.setFromEuler(postCorrectionEuler);
              bone.quaternion.multiply(postCorrectionQuaternion);
              break;
            default:
              break;
          }

          delete bone.modifiedQuaternion;
        }

        bone.updateMatrix();
      }
    });

    for (const name in this.updatedQuaternion) {
      if (this.updatedQuaternion[name]) {
        const bone = this.getBoneByName(name);
        if (bone) {
          if (recordingDatum) {
            recordingDatum.quaternions[name] = bone.quaternion.toArray();
          }
        }
        delete this.updatedQuaternion[name];
      }
    }

    if (this._hasCalibratedAtLeastOnce) {
      for (const side in anchorConfiguration.updatedMass) {
        const mass = anchorConfiguration.masses[side];
        const anchorEntity = this.anchors[side].entity;
        const anchorPrimitive = this.anchors[side].primitive;
        anchorPrimitive.setAttribute(
          "radius-outer",
          THREE.Math.lerp(0, 0.5, mass)
        );

        const exceededThreshold = anchorConfiguration.exceededThresholds[side];
        const updatedThreshold = anchorConfiguration.updatedThresholds[side];

        if (updatedThreshold) {
          if (exceededThreshold) {
            const rootPosition = new THREE.Vector3();
            this.el.object3D.getWorldPosition(rootPosition);

            const footPosition = new THREE.Vector3();
            this.feetObjects[side]
              .getWorldPosition(footPosition)
              .sub(rootPosition);

            const obstacleHeight = 0.4318; // gym bench height
            const allowSteppingOnObstacle = !true;
            if (allowSteppingOnObstacle) {
              footPosition.y =
                footPosition.y >= obstacleHeight / 2 ? obstacleHeight : 0;
            } else {
              footPosition.y = 0;
            }
            const anchorEntity = this.anchors[side].entity;
            anchorEntity.object3D.position.copy(footPosition);
            anchorEntity.object3D.updateMatrix();
          } else {
            if (!this.isOculusBrowser && !this.data.hidePressure) {
              const footStep = document.createElement("a-ring");
              footStep.setAttribute("rotation", "-90 0 0");
              footStep.object3D.position.copy(anchorEntity.object3D.position);
              footStep.object3D.position.y += 0.001;
              footStep.setAttribute("color", side == "left" ? "blue" : "red");
              footStep.setAttribute("radius-inner", 0);
              footStep.setAttribute("radius-outer", 0.15);
              footStep.setAttribute("animation__fade", {
                property: "material.opacity",
                from: 1,
                to: 0,
                dur: 4000,
                easing: "easeOutExpo",
              });
              footStep.addEventListener("animationcomplete__fade", (event) => {
                footStep.remove();
              });
              this.el.appendChild(footStep);
            }
          }

          delete anchorConfiguration.updatedThresholds[side];

          if (exceededThreshold) {
            this.el.emit(`${side}footdown`);
            this.el.emit("footdown", { side });
          } else {
            this.el.emit(`${side}footup`);
            this.el.emit("footup", { side });
          }
        } else {
          if (exceededThreshold) {
            this.el.emit(`${side}footdrag`);
            this.el.emit("footdrag", { side });
          }
        }

        anchorEntity.object3D.visible =
          this.isOculusBrowser || exceededThreshold;
        if (exceededThreshold) {
          if (
            anchorConfiguration.isAnchored &&
            anchorConfiguration.side == side &&
            anchorConfiguration.updatedAnchor
          ) {
            anchorConfiguration.position.copy(anchorEntity.object3D.position);
            delete anchorConfiguration.updatedAnchor;
          }
        }

        delete anchorConfiguration.updatedMass[side];
      }
    }

    if (this.data.pressureAnchoringEnabled && anchorConfiguration.isAnchored) {
      const anchorPosition = anchorConfiguration.position;

      const rootPosition = new THREE.Vector3();
      this.el.object3D.getWorldPosition(rootPosition);

      const { side } = anchorConfiguration;

      const footPosition = new THREE.Vector3();
      this.feetObjects[side].getWorldPosition(footPosition).sub(rootPosition);
      this.positionOffsets.lowerTorso.add(anchorPosition).sub(footPosition);
      this.bones.Hips.position.addVectors(
        this.positions.lowerTorso,
        this.positionOffsets.lowerTorso
      );
      this.bones.Hips.updateMatrix();

      if (recordingDatum) {
        recordingDatum.position = this.bones.Hips.position.toArray();
      }
    }

    if (this._isRecording) {
      recordedData.push(recordingDatum);
    }
  },
  getBoneByName(name) {
    return this.bones[this.boneMapping[name]];
  },
  update: function (oldData) {
    const diff = AFRAME.utils.diff(oldData, this.data);

    const diffKeys = Object.keys(diff);

    if (diffKeys.includes("manualArticulation")) {
      this.updateEntityAutoUpdate();
    }
  },
  updateEntityAutoUpdate() {
    for (const name in this.bones) {
      if (name.includes("Hand")) {
        return;
      }
      const bone = this.bones[name];
      bone.matrixAutoUpdate = this.data.manualArticulation;
      bone.updateMatrix();
    }
  },
  remove: function () {
    this.system.removeEntity(this);
  },
  _updateHandTrackingControls(side) {
    const handTrackingControls =
      this.data[`${side}HandTrackingControls`].components[
        "hand-tracking-controls"
      ];

    if (!handTrackingControls?.mesh?.visible) {
      return;
    }

    if (handTrackingControls?.skinnedMesh) {
      for (const boneSuffix in this.BONE_MAPPING) {
        let rpmSide = side;
        if (this.data.mirrorMode) {
          rpmSide = rpmSide == "left" ? "right" : "left";
        }
        const fromBoneName = this.HAND_BONE_PREFIX[side] + boneSuffix;
        const toBoneName =
          this.RPM_HAND_PREFIX[rpmSide] + this.BONE_MAPPING[boneSuffix];
        const toBone = this.allBones[toBoneName];
        const fromBone =
          handTrackingControls.skinnedMesh.skeleton.getBoneByName(fromBoneName);
        if (fromBone && toBone) {
          const euler = this.handTrackingControlsEulers[toBoneName];
          const quaternion = this.handTrackingControlsQuaternions[toBoneName];
          const inverseQuaternion =
            this.handTrackingControlsQuaternionInverses[toBoneName];
          const correctionQuaternion =
            this.handTrackingControlsCorrectionQuaternions[toBoneName];

          euler.copy(fromBone.rotation);
          euler.reorder("YXZ");
          euler.y -= this.cameraCalibration.rotation.y;
          const { x, y, z, order } = euler;
          switch (boneSuffix) {
            case "wrist":
              if (this.data.mirrorMode) {
                euler.set(-x, -y, z, order);
              } else {
                euler.set(x, y, z, order);
              }
              break;
            case "thumb1":
            case "thumb2":
            case "thumb3":
            case "thumb_null":
            case "index0":
            case "index1":
            case "index2":
            case "index3":
            case "middle0":
            case "middle1":
            case "middle2":
            case "middle3":
            case "ring0":
            case "ring1":
            case "ring2":
            case "ring3":
            case "pinky0":
            case "pinky1":
            case "pinky2":
            case "pinky3":
              if (this.data.mirrorMode) {
                euler.set(-x, -y, z, order);
              } else {
                euler.set(x, y, z, order);
              }
              break;
            default:
              break;
          }
          euler.y += this.cameraCalibration.rotation.y;
          quaternion.setFromEuler(euler);

          toBone.parent.getWorldQuaternion(inverseQuaternion);
          inverseQuaternion.invert();
          quaternion.premultiply(inverseQuaternion);

          quaternion.multiply(correctionQuaternion);

          toBone.quaternion.copy(quaternion);
          toBone.updateMatrix();
        }
      }
    }
  },
  _updateHandControls(side) {
    const handControlsElement = this.data[`${side}HandControls`];
    const handControls = handControlsElement.components["hand-controls"];
    if (!this.isHandControlsConnected[side]) {
      return;
    }

    if (handControls) {
      let rpmSide = side;
      if (this.data.mirrorMode) {
        rpmSide = rpmSide == "left" ? "right" : "left";
      }
      const suffix = "wrist";
      const wristBoneName =
        this.RPM_HAND_PREFIX[rpmSide] + this.BONE_MAPPING[suffix];
      const wristBone = this.allBones[wristBoneName];

      if (wristBone) {
        const euler = this.handControlsEulers[wristBoneName];
        const quaternion = this.handControlsQuaternions[wristBoneName];
        const inverseQuaternion =
          this.handControlsQuaternionInverses[wristBoneName];
        const correctionQuaternion =
          this.handControlsCorrectionQuaternions[wristBoneName];

        euler.copy(handControlsElement.object3D.rotation);
        euler.reorder("YXZ");
        euler.y -= this.cameraCalibration.rotation.y;
        const { x, y, z, order } = euler;
        switch (suffix) {
          case "wrist":
            if (this.data.mirrorMode) {
              euler.set(-x, -y, z, order);
            } else {
              euler.set(x, y, z, order);
            }
            break;

          default:
            break;
        }
        euler.y += this.cameraCalibration.rotation.y;
        if (this.data.camera.parentEl.parentEl.id === "cameraRotation") {
          euler.y += this.data.camera.parentEl.parentEl.object3D.rotation.y;
        }
        quaternion.setFromEuler(euler);

        wristBone.parent.getWorldQuaternion(inverseQuaternion);
        inverseQuaternion.invert();
        quaternion.premultiply(inverseQuaternion);

        quaternion.multiply(correctionQuaternion);

        wristBone.quaternion.copy(quaternion);
        wristBone.updateMatrix();
      }

      if (this.model) {
        const previousGesture = this.handControlsGesture[side];
        const currentGesture = handControls.gesture;
        if (previousGesture !== currentGesture) {
          this.handControlsGesture[side] = currentGesture;
          const gestureKey = currentGesture || "Open";
          const pose = this.handControlsPoses[gestureKey][rpmSide];
          if (pose && Object.keys(pose).length > 0) {
            const timeline = AFRAME.ANIME.timeline({
              duration: 250,
              easing: "linear",
            });
            for (let boneName in pose) {
              const quaternion = pose[boneName];
              if (quaternion) {
                const { x, y, z, w } = quaternion;
                const bone = this.model.getObjectByName(boneName);
                const q = {
                  x: bone.quaternion.x,
                  y: bone.quaternion.y,
                  z: bone.quaternion.z,
                  w: bone.quaternion.w,
                };
                timeline.add(
                  {
                    targets: q,
                    x,
                    y,
                    z,
                    w,
                    update: (animation) => {
                      bone.quaternion.copy(q);
                    },
                  },
                  0
                );
              }
            }
            timeline.began = true;
            timeline._time = 0;
            this.timelines[side] = timeline;
          }
        }
      }
    }
  },
  logPose: function (side) {
    const pose = {};
    Object.keys(this.allBones)
      .filter(
        (key) =>
          key !== this.RPM_HAND_PREFIX[side] &&
          key.includes(this.RPM_HAND_PREFIX[side])
      )
      .forEach((boneName) => {
        const { x, y, z, w } = this.model.getObjectByName(boneName).quaternion;
        pose[boneName] = { x, y, z, w };
      });
    return pose;
  },

  logBatteryLife: function () {
    this.devices.forEach((device) => {
      console.log(`${device._name}: ${device._batteryLevel}%`);
    });
  },
});
